---
globs: *.toml,requirements.txt
alwaysApply: false
---
# Dependency Management Rules
# 依赖管理规范

## 依赖管理原则

### 1. 统一管理方式
- **只使用pyproject.toml**作为唯一的依赖管理文件
- 不使用requirements.txt或其他依赖管理文件
- 避免同时使用多种依赖管理工具

### 2. 最小依赖原则
- 只包含实际生产环境必需的依赖
- 避免包含开发工具作为核心依赖
- 使用可选依赖组管理开发、测试和文档工具

### 3. 版本管理
- 使用语义化版本控制
- 指定最低版本要求，避免过于严格的版本锁定
- 定期更新依赖以获取安全补丁

## 依赖分类

### 核心依赖（生产环境必需）
```toml
dependencies = [
    "agno>=0.1.0",
    "pydantic>=2.0.0", 
    "python-dotenv>=1.0.0",
]
```

### 开发依赖（可选）
```toml
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]
```

## 依赖管理最佳实践

### 1. 添加新依赖
- 评估是否真的需要这个依赖
- 检查是否有更轻量级的替代方案
- 确保依赖有活跃的维护和社区支持

### 2. 更新依赖
- 定期检查依赖的安全漏洞
- 在测试环境中验证依赖更新
- 记录依赖更新的原因和影响

### 3. 移除依赖
- 定期审查未使用的依赖
- 移除不再需要的依赖
- 更新相关文档和配置

## 安装指南

### 生产环境安装
```bash
# 只安装核心依赖
pip install -e .
```

### 开发环境安装
```bash
# 安装核心依赖和开发工具
pip install -e ".[dev]"
```

### 测试环境安装
```bash
# 安装核心依赖和测试工具
pip install -e ".[test]"
```

## 依赖审查清单

在添加新依赖前，请确认：

1. **必要性**: 这个依赖是否真的必需？
2. **替代方案**: 是否有更轻量级的替代方案？
3. **维护状态**: 依赖是否有活跃的维护？
4. **许可证**: 依赖的许可证是否与项目兼容？
5. **安全性**: 依赖是否有已知的安全漏洞？
6. **性能影响**: 依赖是否会对性能产生负面影响？

## 禁止的做法

- ❌ 同时使用requirements.txt和pyproject.toml
- ❌ 将开发工具作为核心依赖
- ❌ 使用过于严格的版本锁定
- ❌ 添加未使用的依赖
- ❌ 忽略依赖的安全更新

## 推荐的做法

- ✅ 使用pyproject.toml作为唯一依赖管理文件
- ✅ 只包含生产环境必需的依赖
- ✅ 使用可选依赖组管理开发工具
- ✅ 定期更新依赖版本
- ✅ 记录依赖添加的原因
- ✅ 在CI/CD中验证依赖安装
# Dependency Management Rules
# 依赖管理规范

## 依赖管理原则

### 1. 统一管理方式
- **只使用pyproject.toml**作为唯一的依赖管理文件
- 不使用requirements.txt或其他依赖管理文件
- 避免同时使用多种依赖管理工具

### 2. 最小依赖原则
- 只包含实际生产环境必需的依赖
- 避免包含开发工具作为核心依赖
- 使用可选依赖组管理开发、测试和文档工具

### 3. 版本管理
- 使用语义化版本控制
- 指定最低版本要求，避免过于严格的版本锁定
- 定期更新依赖以获取安全补丁

## 依赖分类

### 核心依赖（生产环境必需）
```toml
dependencies = [
    "agno>=0.1.0",
    "pydantic>=2.0.0", 
    "python-dotenv>=1.0.0",
]
```

### 开发依赖（可选）
```toml
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]
```

## 依赖管理最佳实践

### 1. 添加新依赖
- 评估是否真的需要这个依赖
- 检查是否有更轻量级的替代方案
- 确保依赖有活跃的维护和社区支持

### 2. 更新依赖
- 定期检查依赖的安全漏洞
- 在测试环境中验证依赖更新
- 记录依赖更新的原因和影响

### 3. 移除依赖
- 定期审查未使用的依赖
- 移除不再需要的依赖
- 更新相关文档和配置

## 安装指南

### 生产环境安装
```bash
# 只安装核心依赖
pip install -e .
```

### 开发环境安装
```bash
# 安装核心依赖和开发工具
pip install -e ".[dev]"
```

### 测试环境安装
```bash
# 安装核心依赖和测试工具
pip install -e ".[test]"
```

## 依赖审查清单

在添加新依赖前，请确认：

1. **必要性**: 这个依赖是否真的必需？
2. **替代方案**: 是否有更轻量级的替代方案？
3. **维护状态**: 依赖是否有活跃的维护？
4. **许可证**: 依赖的许可证是否与项目兼容？
5. **安全性**: 依赖是否有已知的安全漏洞？
6. **性能影响**: 依赖是否会对性能产生负面影响？

## 禁止的做法

- ❌ 同时使用requirements.txt和pyproject.toml
- ❌ 将开发工具作为核心依赖
- ❌ 使用过于严格的版本锁定
- ❌ 添加未使用的依赖
- ❌ 忽略依赖的安全更新

## 推荐的做法

- ✅ 使用pyproject.toml作为唯一依赖管理文件
- ✅ 只包含生产环境必需的依赖
- ✅ 使用可选依赖组管理开发工具
- ✅ 定期更新依赖版本
- ✅ 记录依赖添加的原因
- ✅ 在CI/CD中验证依赖安装
